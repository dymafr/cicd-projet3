name: CI/CD workflow

env:
  SERVER_USER: "root"
  SERVER_IP: "54.37.11.162"

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main

jobs:
  tests_backend:
    runs-on: ubuntu-latest
    steps:
    - name: checkout le code
      uses: actions/checkout@v4

    - name: installer Node.js
      uses: actions/setup-node@v3 # défaut = LTS
      with:
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: installer les dépendances
      run: |
        cd server
        npm ci --cache .npm --prefer-offline
          
    - name: exécute les tests
      run: |
        cd server
        npm run test:ci
          
    - name: vérifie le code
      run: |
        cd server
        npm run lint
          
    - name: vérifie les vulnérabilités
      run: |
        cd server
        npm audit

    - name: Upload du rapport de couverture sur Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  checks_frontend: 
    runs-on: ubuntu-latest
    steps:
    - name: checkout le code
      uses: actions/checkout@v4

    - name: installer Node.js
      uses: actions/setup-node@v3 
      with:
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: installer les dépendances
      run: |
        cd client
        npm ci --cache .npm --prefer-offline

    - name: vérifie les vulnérabilités
      run: |
        cd client
        npm audit
    - name: vérifie le code
      run: |
        cd client
        npm run lint

  build_frontend:
    runs-on: ubuntu-latest
    needs: [checks_frontend]
    steps:
    - name: checkout le code
      uses: actions/checkout@v4

    - name: installer Node.js
      uses: actions/setup-node@v3 
      with:
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: installer les dépendances
      run: |
        cd client
        npm ci --cache .npm --prefer-offline

    - name: build le frontend
      run: |
        cd client
        npm run build

    - name: archiver les artefacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-dist
        path: client/dist/
        retention-days: 1

  test_e2e:  
    runs-on: ubuntu-latest 
    needs: [build_frontend] 
    strategy:
      matrix:
        browser: ["chrome", "firefox", "edge"]
    steps:
    - name: checkout le code
      uses: actions/checkout@v4

    - name: télécharger l'artéfact du frontend
      uses: actions/download-artifact@v3
      with:
        name: frontend-dist 
        path: client/dist/

    - name: installer Node.js
      uses: actions/setup-node@v3 
      with:
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: installer les dépendances serveur
      run: |
        cd server
        npm ci --cache .npm --prefer-offline

    - name: lancer le serveur backend
      run: |
        cd server
        node index.js &
        
    - name: Cypress
      uses: cypress-io/github-action@v6
      with:
        working-directory: client
        browser: ${{ matrix.browser }}
        start: npm run preview
        wait-on: http://localhost:4173
        wait-on-timeout: 60
        config: baseUrl=http://localhost:4173
    
    - name: Upload du rapport de couverture sur Codecov
      if : matrix.browser == 'chrome' # pour ne pas uploader 3 fois le rapport
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    needs: [checks_frontend, tests_backend, build_frontend, test_e2e]
    runs-on: ubuntu-latest
    steps:
    - name: checkout le code
      uses: actions/checkout@v4

    - name: télécharger l'artéfact du frontend
      uses: actions/download-artifact@v3
      with:
        name: frontend-dist 
        path: client/dist/

    - name: déployer sur le serveur
      run: |
        eval $(ssh-agent -s)
        ssh-add - <<< "${{ secrets.OVH_PROD_PKEY }}"
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts
        scp -r ./client/dist ${{ env.SERVER_USER }}@${{ env.SERVER_IP }}:/var/www
        scp -r ./server ${{ env.SERVER_USER }}@${{ env.SERVER_IP }}:/var/www
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "cd /var/www/server && npm install --omit=dev"
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "cd /var/www/server && pm2 startOrRestart ecosystem.config.js --env production && pm2 save"